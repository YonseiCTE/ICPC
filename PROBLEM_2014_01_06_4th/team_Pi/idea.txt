1.
 먼저 벌꿀 집을 일정한 규칙을 기준으로 데이터화 시켜야 한다.




2.
 방법은 의외로 간단하다.
 벌꿀 집을 흔히 알고있는 수직의 축선 'y 축'과 대각선 축선 'd(diagonal) 축'을 기준으로 좌표를 잡아주면 된다.

 * 대각선 축선은 '/' 왼쪽 대각선으로 생각하자.




3.
 만약 (0, 0), (2, 0)의 좌표가 있다면
 이는 (y축 0, d축 0). (y축 2, d축 0)을 의미한다.

 지금부터 설명하는 내용은 그림을 보지 않고서는 헷갈릴 수 있으니 문제에 그려져 있는 그림을 보면서 읽어나가길 추천한다.




4.
 먼저 (0, 0)의 기준을 잡는다. '1'번 집을 (0, 0)으로 보도록 하자.
 그렇다면 '2'번 집은 (-2, 0)이 된다.
 아래로 한칸 내려간 것은 y축 음의 방향으로 '2'칸 움직였다고 생각하면 되겠다.
 그렇다면 '5'번 집은 (2, 0)이 될 것이다.

 이번엔 '3'번 집을 살펴보자.
 '3'번 집은 (-1, -1)이 된다.
 d축(대각선 축)은 왼쪽으로 '1'칸 이동할 시 음의 방향으로 '1'칸 움직였다고 생각하면 되겠다.
 또한 수직선 상으로 봤을때 '3'번 집이 '1'번 집과 '2'번집 중간에 있다는 것도 알 수 있다.
 따라서 수직으로도 '1'칸 움직였다고 생각하면 되겠다.
 그렇다면 '7'번 집은 (-1, 1)이 될 것이다.

 * '6'의 좌표를 생각해보면 쉽게 (1, 1)임을 알수 있다. '6'과 수직으로 만나는 모든 집들의 d축 좌표는 같다고 생각하자.




5.
 이제 좌표에 대한 개념이 모두 잡혔을 것이다.
 이번에는 꿀벌의 집이 가지고 있는 규칙적인 특징을 찾아야 한다.




6.
 먼저 '1 ~ 7'번까지의 집을 우리가 알고있는 개념으로 좌표를 지정해 데이터화 한다.

 1 : (0, 0)
 2 : (-2, 0)
 3 : (-1, -1)
 4 : (1, -1)
 5 : (2, 0)
 6 : (1, 1)
 7 : (-1, 1)




7.
 자, 이제 규칙을 찾아보자!
 '8'번 집은 아직 데이터화 하지 않은 상태이다.
 즉, '8'번 집부터 좌표를 데이터화 한다.

 '8'번부터 'N'번까지의 모든 꿀벌의 집들은 아래와 같은 규칙을 갖는다.
 먼저 Move_Count = 1 로 지정해야 한다.

 /*
 아래로 한번,
 왼쪽 대각선 아래 방향으로 Move_Count번,
 Move_Count++
 오른쪽 대각선 위 방향으로 Move_Count번,
 위로 Move_Count번,
 왼쪽 대각선 위 방향으로 Move_Count번,
 오른쪽 대각선 아래 방향으로 Move_Count번,
 아래 방향으로 Move_Count번
 */
 
 위의 주석으로 표기한 내용을 반복하며 벌꿀집이 만들어진다.
 직접 그림을 보며 확인해 보면 저 규칙이 '참'임을 금방 알 수 있다.




8.
 모든 집들을 데이터화 했다면, 이제 거리만 구하면 된다.
 거리를 구할 때는 두가지 경우가 있다.

 입력 받은 두 집이 'd축'이 같을 경우와, 다를 경우다.
 만약 'd축'이 같다면 두 집은 수직선 상에 놓여 있다는 것을 쉽게 알 수 있다.
 따라서, 아래의 식으로 문제를 해결 할 수 있다.

 Distance : 구하고자 하는 거리
 First_y : 첫 번째 입력 받은 집의 'y축' 좌표
 Second_y : 두 번째 입력 받은 집의 'y축' 좌표

 Distance = abs ( First_y - Second_y ) / 2

 위의 식에서 '나누기 2'가 있는 이유는 수직으로 움직일 때 '2'만큼 좌표가 변경 되었기 때문이다.




9.
 이번엔 'd축'이 서로 다를 경우의 계산 방법이다.

 Distance : 구하고자 하는 거리
 First_y : 첫 번째 입력 받은 집의 'y축' 좌표
 First_d : 첫 번째 입력 받은 집의 'd축' 좌표
 Second_y : 두 번째 입력 받은 집의 'y축' 좌표
 Second_d : 두 번째 입력 받은 집의 'd축' 좌표

 Distance = abs ( First_d - Second_d ) ;
 Distance += ( abs ( First_y - Second_y ) - Distance ) / 2

 먼저 abs ( First_d - Second_d )를 보자.
 그림을 보면서 생각해 보면 쉽다.
 만약 '5'번 집과 '19'번 집의 거리를 구하라 했다고 하자.
 둘 사이의 대각선 거리는 '2'이다.

 * '18'과 '19'의 d축 좌표는 같으므로 '5'와 '18'번 사이의 대각선 거리로 생각하면 이해하기 쉽다.

 따라서,
 abs ( First_d - Second_d )
 위의 식의 값이 '2'가 된다.

 이번엔 y축 거리를 구해보자.
 '5'번 집은 (2, 0)이며 '19'번 집은 (-2, 2)이다.
 따라서 y축 상의 거리는 '4'이다.
 그러나 '5'번 집에서 '18'번 집으로 이동했을 경우를 생각해보면
 두 집 사이의 대각선 거리만큼 y축의 거리를 감소시켜야 한다는 것을 알 수 있다.

 따라서,
 abs ( First_y - Second_y ) - Distance
 위의 식을 얻게 된다.
 하지만 수직상의 거리는 '2'만큼 변경 됨을 우리는 알고 있다.

 따라서,
 ( abs ( First_y - Second_y ) - Distance ) / 2
 위의 식처럼 '나누기 2'를 해주어야 한다.
 이로써 위에 표현된 계산 방법이 '참'임을 알 수 있다.




10.
 표현하는 방식은 자유지만 우리 팀(Pi)은 배열로 좌표를 데이터화 하였다.
 방법은 아래와 같다.

 Bee_House [N][0] : 'N'번 집의 x축 좌표
 Bee_House [N][1] : 'N'번 집의 d축 좌표



시간 복잡도 : log (n)